#include <iostream>

//BY: Frankie Herbert
//Help From: GeeksForGeeks, Software testing help, BOOK, class-notes

struct Node {
	int data;
	Node *left;
	Node *right;
};

#include "binary_node.h"


int insertNode(Node** root, Node *newNode, int data){
    if (*root == NULL){
            (*root) = newNode;
    return 0;
    }

    else if ((*root)->data < data)
        insertNode(&((*root)->right), newNode, data);
    else if ((*root)->data > data)
        insertNode(&((*root)->left), newNode, data);
    else
        return 1;
}

int insertData(Node** root, int data){
    Node *newNode = new Node;
    if (!newNode)
        return 1;

        newNode->data = data;
        newNode->left = NULL;   //to create a binary node
        newNode->right = NULL;
        insertNode(&(*root), newNode, data);
        return 0;
}

int preOrder(Node *root){        //create a pre-prder
    if (root){
        cout<<root->data<<" - ";    //display tree visiting the root
        preOrder(root->left);       //then from root to visiting left
        preOrder(root->right);      //then from left to visiting right
    }
    return 0;
}

int inOrder(Node *root){  //create an in-order
    if (root){
        inOrder(root->left);    //explore the left subtree
        cout<<root->data<< " - ";  //then the root (with display)
        inOrder(root->right);   //then the nodes in the right subtree
    }
}

int postOrder(Node *root){     //create a post-order
    if (root){
        postOrder(root->left);   //visit the left subtree
        postOrder(root->right);   //then the right
        cout<<root->data<< " - "; //display the root values
    }
}

int main(){
    Node *root = NULL; 
    Node *ptr = NULL;
    insertData(&root, 2);                   //binary tree to be traversed
    insertData(&root, 18);
    insertData(&root, 22);
    insertData(&root, 99);
    insertData(&root, 4);
    cout<<"PreOrder Traversing: \n";      //printing the pre-order 
    preOrder(root);
    cout<<"\nInOrder Traversing: \n";      //printing the in-order
    inOrder(root); 
    cout<<"\nPostOrder Traversing: \n";     //printing the post-order
    postOrder(root);

}
